import org.apache.commons.io.FileUtils
import org.apache.commons.io.filefilter.FileFilterUtils
import org.apache.commons.io.filefilter.TrueFileFilter

buildscript {
    repositories {
        maven { url = 'https://files.minecraftforge.net/maven' }
        jcenter()
        mavenCentral()
    }
    dependencies {
        classpath 'net.minecraftforge.gradle:ForgeGradle:3.+'
        classpath 'commons-io:commons-io:2.5'
    }
}

apply plugin: 'net.minecraftforge.gradle'
apply plugin: 'idea'

def mcVersion = '1.12.2'
version = '1.0'
group = 'team.cappcraft.icheme'
archivesBaseName = 'immersive-chemical-engineering'

minecraft {
    mappings channel: 'snapshot', version: '20171003-1.12'

    runs {
        client {
            workingDirectory project.file('run')

            // Recommended logging data for a userdev environment
            property 'forge.logging.markers', 'SCAN,REGISTRIES,REGISTRYDUMP'

            // Recommended logging level for the console
            property 'forge.logging.console.level', 'debug'
        }

        server {

            // Recommended logging data for a userdev environment
            property 'forge.logging.markers', 'SCAN,REGISTRIES,REGISTRYDUMP'

            // Recommended logging level for the console
            property 'forge.logging.console.level', 'debug'
        }
    }
}

repositories {
    maven {
        name = 'ModMaven'
        url 'https://modmaven.dev'
    }
    maven {
        name = 'CoFH Maven'
        url = 'http://maven.covers1624.net/'
    }
    maven {
        name = 'ChickenBones Maven'
        url = "http://chickenbones.net/maven/"
    }
    maven {
        name = 'JEI Maven'
        url = 'http://dvs1.progwml6.com/files/maven'
    }

    maven {
        name = "CurseForge"
        url = "https://minecraft.curseforge.com/api/maven/"
    }
    maven {
        name = 'Immersive Maven'
        url = 'http://maven.blamejared.com'
    }
}

dependencies {
    minecraft 'net.minecraftforge:forge:1.12.2-14.23.5.2854'
    implementation 'mezz.jei:jei_1.12.2:4.+'
    implementation 'cofh:RedstoneFlux:1.12-2.+:deobf'
    implementation 'mcjty.theoneprobe:TheOneProbe-1.12:1.12-1.+'
    implementation 'CraftTweaker2:CraftTweaker2-MC1120-Main:1.12-4.+'
    implementation 'blusunrize:ImmersiveEngineering:0.12-+'
}

jar {
    manifest {
        attributes([
                "Specification-Title"     : "immersive-chemical-engineering",
                "Specification-Vendor"    : "Cappcraft Team",
                "Specification-Version"   : "1",
                "Implementation-Title"    : project.name,
                "Implementation-Version"  : "${version}",
                "Implementation-Vendor"   : "Cappcraft Team",
                "Implementation-Timestamp": new Date().format("yyyy-MM-dd'T'HH:mm:ssZ")
        ])
    }
}

task("transformAccessTransformer") {
    group = "access_transformer"
    if (file("$buildDir/generatedATs").exists())
        minecraft.accessTransformers.addAll(FileUtils.listFiles(
                file("$buildDir/generatedATs"),
                FileFilterUtils.nameFileFilter("accesstransformer.cfg"),
                TrueFileFilter.INSTANCE))
    doLast {
        FileUtils.deleteDirectory(file("$buildDir/generatedATs"))
        project.configurations["runtimeClasspath"].filter {
            !it.name.startsWith("forge")
        }.forEach {
            zipTree(it).filter { content ->
                content.name.endsWith("_at.cfg")
            }.forEach { at ->
                println("Found AccessTransFormer: ${at.name} in ${it.name}")
                FileUtils.copyFile(
                        at as File,
                        file("$buildDir/generatedATs/${at.name.substring(0, at.name.lastIndexOf("."))}/accesstransformer.cfg"))
            }
        }
    }
}

compileJava {
    sourceCompatibility = targetCompatibility = JavaVersion.VERSION_1_8
}

processResources {
    inputs.properties(
            "version": version,
            "mcversion": mcVersion
    )
    filesMatching("mcmod.info") {
        expand("version": version, "mcversion": mcVersion)
    }
}

jar.finalizedBy('reobfJar')


sourceSets {
    main { output.resourcesDir = output.classesDir }
}
